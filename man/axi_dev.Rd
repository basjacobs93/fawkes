% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/device.R
\name{axi_dev}
\alias{axi_dev}
\title{A graphic device that renders using the AxiDraw pen plooter}
\usage{
axi_dev(paper_size = "A4", portrait = TRUE, margins = 0,
  tip_size = 1, color = "black", ignore_color = TRUE,
  draw_fill = TRUE, connect_hatch = TRUE, hatch_gap = 0,
  hatch_angle = 0, crosshatch = FALSE, optimise_order = TRUE,
  options = list())
}
\arguments{
\item{paper_size}{The size of the paper to draw on, either as a numeric
vector  giving dimensions in mm, or as a standard paper size name.}

\item{portrait}{Logical. Is the paper oriented as portrait
(i.e. width < height). Will rearrange given paper dimensions to fit.}

\item{tip_size}{The size of the tip (i.e. the width of the line it draws) of
the initial pen}

\item{color}{The color of the initial pen}

\item{ignore_color}{Logical. Should changes in color output be ignored? If
\code{TRUE} the plotter will not pause for pen change when the colour changes}

\item{draw_fill}{Logical. Should fill be drawn using hatching?}

\item{connect_hatch}{Logical. Should the hatchline be drawn as connected?}

\item{hatch_gap}{The gap between hatchlines in mm. Set to \code{0} to draw as
continuous fill. Set to \code{'alpha'} to let it be determined by the alpha
component of the fill color.}

\item{hatch_angle}{The angle of the hatch lines in degrees. Set to \code{'random'}
to pick a random angle for each fill. Set to \code{'auto'} to pick the best angle
for each fill.}

\item{crosshatch}{Logical. Should fill be drawn with cross-hatching?}

\item{optimise_order}{Logical. Should the drawing order be optimised so that
pen movement is minimised? Will only affect consecutive calls to the same
drawing primitive.}

\item{options}{A list of options for the AxiDraw. Use \code{\link[=manual_options]{manual_options()}} for
help with creating a valid list of options.}

\item{margins.}{The margins of the paper, in mm. The spec follows that of css,
meaning that if it is given as a single value it defines all margins, if
given as two values it defines top/bottom, left/right, if it is given as
three values it defines top, left/right, bottom, and if it is given as four
values it defines top, right, bottom, left.}
}
\description{
This call opens up a graphic device that takes plotting instructions from
e.g. \code{plot()} or ggplot2, and renders it with the AxiDraw.
}
\details{
At the moment the device will ignore colour information and will only draw
the stroke of objects. Further, any linetype information is lost. It will try
to match the linewidth, but can obviously not draw something thinner than the
tip of the pen. Clipping is, incredibly, supported, but text is not. Most of
the restrictions above will be handled with time.
}
\note{
\strong{UNDER CONSTRUCTION}
}
